# two-pass O(n^2) 
class Solution(object):
    def wiggleMaxLength(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if len(nums)<2:
            return len(nums)
        up = [0]*len(nums)
        down = [0]*len(nums)
        for i in range(1,len(nums)):
            for j in range(i):
                if nums[i]>nums[j]:
                    up[i] = max(up[i], down[j]+1)
                elif nums[i]<nums[j]:
                    down[i] = max(down[i], up[j]+1)
        return 1+max(up[-1], down[-1])   
        
        
# one-pass
class Solution(object):
    def wiggleMaxLength(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if len(nums)<2:
            return len(nums)
        up, down = 1, 1
        for i in range(1, len(nums)):
            if nums[i]>nums[i-1]:
                up = down+1
            elif nums[i]<nums[i-1]:
                down = up+1
        return max(up, down)
        
 # greedy:
 class Solution(object):
    def wiggleMaxLength(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if len(nums)<2:
            return len(nums)
        left = nums[1]-nums[0]
        count = 1 if left==0 else 2
        for i in range(2, len(nums)):
            right = nums[i] - nums[i-1]
            if (right>0 and left<=0) or (right<0 and left>=0):
                count += 1
                left = right
        return count
            
            
            
            
