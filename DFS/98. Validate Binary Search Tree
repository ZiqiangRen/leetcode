# First time 
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isValidBST(self, root, minv=float("-inf"), maxv=float("inf")):
        """
        :type root: TreeNode
        :rtype: bool
        """
        return root==None or ((minv<root.val<maxv) and self.isValidBST(root.left, minv, root.val) and self.isValidBST(root.right, root.val, maxv))
        
        
# Second try: naive solution, ready to be optimized:
class Solution(object):
    def isValidBST(self, root):
        def helper(root, small, large, l):
            if not root:
                return True
            if l:
                if root.val<=small or root.val>=large:
                    return False
                else:
                    return helper(root.left, small, root.val, True) and helper(root.right, root.val, large, False)
            else:
                if root.val<=small or root.val>=large:
                    return False
                else:
                    return helper(root.left, small, root.val, True) and helper(root.right, root.val, large, False)
        if not root:
            return True
        return helper(root.left, float('-inf'), root.val, True) and helper(root.right, root.val, float('inf'), False)
      
# optimized:
class Solution(object):
    def isValidBST(self, root, small=float('-inf'), large=float('inf')):
        if not root:
            return True
        if root.val<=small or root.val>=large:
            return False
        else:
            return self.isValidBST(root.left, small, root.val) and self.isValidBST(root.right, root.val, large)
        
