# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
# Time: O(nlogn), average depth:log(n), self.depth: O(n)
# Space: O(n)
class Solution(object):
    def depth(self, root):
        if not root:
            return 0
        return 1 + max(self.depth(root.left), self.depth(root.right))
    def isBalanced(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        if not root:
            return True
        if -2<self.depth(root.left)-self.depth(root.right)<2:
            return self.isBalanced(root.left) and self.isBalanced(root.right)
        return False
  
  
  
# time: O(n), in the self.depth() function, if left and right subtree's height differ over 1, return -1 ( as a flag)  
class Solution(object):
    def depth(self, root):
        if not root:
            return 0
        left = self.depth(root.left)
        right = self.depth(root.right)
        if abs(left-right)>1 or left==-1 or right==-1:
            return -1
        return 1 + max(left, right)
    def isBalanced(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        return self.depth(root)!=-1
