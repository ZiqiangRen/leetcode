# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def sortedListToBST(self, head):
        """
        :type head: ListNode
        :rtype: TreeNode
        """
        if not head:
            return None
        p = ListNode(0)
        p.next = head
        p1, p2 = head, head
        while p2 and p2.next:
            p = p1
            p1 = p1.next
            p2 = p2.next.next
        # p1 is in the middle of the link
        root = TreeNode(p1.val)
        if p.next == head:
            head = None
            p1.next = None
        p.next = None
        root.left = self.sortedListToBST(head)
        root.right = self.sortedListToBST(p1.next)
        return root
    
    
# Recursion and Conversion to array:
class Solution(object):
    def sortedListToBST(self, head):
        """
        :type head: ListNode
        :rtype: TreeNode
        """        
        def helper(nums):
            if not nums:
                return None
            mid = len(nums)//2
            root = TreeNode(nums[mid])
            root.left = helper(nums[:mid])
            root.right = helper(nums[mid+1:])
            return root        
        nums = []
        while head:
            nums.append(head.val)
            head = head.next
        return helper(nums)
