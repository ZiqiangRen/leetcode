# Definition for binary tree with next pointer.
# class TreeLinkNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
#         self.next = None

# time O(n)
# space O(n)
class Solution:
    # @param root, a tree link node
    # @return nothing
    def connect(self, root):
        queue = [root]
        while any(queue):
            tmp = []
            while queue:
                tmp.append(queue.pop())
            tmp = tmp[::-1]
            pre = tmp.pop()
            while not pre:
                pre = tmp.pop()
            queue.insert(0, pre.left)
            queue.insert(0, pre.right)
            for x in tmp[::-1]:
                if x:
                    queue.insert(0, x.left)
                    queue.insert(0, x.right)
                    pre.next = x
                    pre = x
        return
    
    
# The algorithm is a BFS or level order traversal. We go through the tree level by level. node is the pointer in the parent level, tail is the tail pointer in the child level.
# The parent level can be view as a singly linked list or queue, which we can traversal easily with a pointer.
# Connect the tail with every one of the possible nodes in child level, update it only if the connected node is not nil.
# Do this one level by one level. The whole thing is quite straightforward.   

# time O(n)
# space O(1)

def connect(self, node):
    tail = dummy = TreeLinkNode(0)
    while node:
        tail.next = node.left
        if tail.next:
            tail = tail.next
        tail.next = node.right
        if tail.next:
            tail = tail.next
        node = node.next
        if not node:
            tail = dummy
            node = dummy.next

