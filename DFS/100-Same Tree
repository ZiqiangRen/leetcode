# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
# time complexity: O(n)
# space complexity: O(h), h is the max depth of the two trees
class Solution(object):
    def isSameTree(self, p, q):
        """
        :type p: TreeNode
        :type q: TreeNode
        :rtype: bool
        """
        if not p and not q:
            return True
        if not p or not q:
            return False
        return p.val==q.val and self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)
        
        
        
# Iteration using Stack (DFS)
# Time: O(n)
# Space: O(n)
class Solution(object):
    def isSameTree(self, p, q):
        """
        :type p: TreeNode
        :type q: TreeNode
        :rtype: bool
        """
        stack = [p, q]
        while stack:
            q = stack.pop()
            p = stack.pop()
            if not p and not q:
                continue
            if not p or not q:
                return False
            if p.val != q.val:
                return False
            else:
                stack.append(p.left)
                stack.append(q.left)
                stack.append(p.right)
                stack.append(q.right)
        return True
