# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

# Time: O(n)
# Space: O(logn)
# in the worst case, the tree is completely unbalanced, e.g. each node has only one child node, 
# the recursion call would occur NN times (the height of the tree), therefore the storage to 
# keep the call stack would be \mathcal{O}(N)O(N). But in the best case (the tree is completely balanced), 
# the height of the tree would be \log(N)log(N). Therefore, the space complexity in this case would be \mathcal{O}(\log(N))O(log(N)). 

class Solution(object):
    def hasPathSum(self, root, sum):
        """
        :type root: TreeNode
        :type sum: int
        :rtype: bool
        """
        if not root:
            return False
        if sum==root.val and not root.left and not root.right:
            return True
        return self.hasPathSum(root.left, sum-root.val) or self.hasPathSum(root.right, sum-root.val)
        
        
# DFS iteration using stack
# time: O(n)
# space O(logn)

class Solution(object):
    def hasPathSum(self, root, sum):
        """
        :type root: TreeNode
        :type sum: int
        :rtype: bool
        """

        stack = [[root, sum]]
        while stack:
            cur, val = stack.pop()
            if not cur:
                continue
            val -= cur.val
            if not val and not cur.left and not cur.right:
                return True
            stack.append([cur.left, val])
            stack.append([cur.right, val])
        return False
