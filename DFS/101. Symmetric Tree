#recursion:

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isSymmetric(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        def compare(r1,r2):
            if not r1 and not r2:
                return True
            if not r1 or not r2:
                return False
            return r1.val==r2.val and compare(r1.left, r2.right) and compare(r1.right, r2.left)
        return compare(root, root)
        
        
# Iteration:
class Solution(object):
    def isSymmetric(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        stack = [(root, root)]
        while stack:
            left, right = stack.pop()
            if not left and not right:
                continue
            if not left or not right or left.val!=right.val:
                return False
            stack.append((left.left, right.right))
            stack.append((left.right, right.left))
        return True
