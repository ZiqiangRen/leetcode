class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        if not grid:
            return 0
        p = grid
        
        def bfs(i,j):
            if i<0 or j<0 or j>col-1 or i>row-1:
                return
            if p[i][j]== '1':
                p[i][j] = '0'
                bfs(i-1,j)
                bfs(i+1,j)
                bfs(i,j-1)
                bfs(i,j+1)
            return
        
        count = 0
        row = len(p)
        col = len(p[0])
        for i in range(row):
            for j in range(col):
                if p[i][j] == '1':
                    count += 1
                    bfs(i,j)
        return count
        
        
# Second time , the same method DFS:
#
class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        if not grid or not grid[0]:
            return 0
        row = len(grid)
        col = len(grid[0])
        seen = [[0]*len(grid[0]) for _ in range(len(grid))]
        count = 0
        
        def dfs(m, n):
            if m<0 or m>=row or n<0 or n>=col:
                return
            if not seen[m][n] and grid[m][n] == "1":
                seen[m][n] = 1
                dfs(m+1, n)
                dfs(m-1, n)
                dfs(m, n+1)
                dfs(m, n-1)
            return
        
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if not seen[i][j] and grid[i][j] == "1":
                    dfs(i,j)
                    count += 1
        return count
        
       
 # DFS iteration instead of recursion:
 
 class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        if not grid or not grid[0]:
            return 0
        row = len(grid)
        col = len(grid[0])
        seen = [[0]*len(grid[0]) for _ in range(len(grid))]
        count = 0
        
        def dfs(m, n):
            stack = [[m,n]]
            while stack:
                cur_i, cur_j = stack.pop()   
                if cur_i>=row or cur_i<0 or cur_j<0 or cur_j>=col:
                    continue
                if not seen[cur_i][cur_j] and grid[cur_i][cur_j] == "1":
                    seen[cur_i][cur_j] = 1
                    stack.append([cur_i+1, cur_j])
                    stack.append([cur_i-1, cur_j])
                    stack.append([cur_i, cur_j+1])
                    stack.append([cur_i, cur_j-1])
            return
        
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if not seen[i][j] and grid[i][j] == "1":
                    dfs(i,j)
                    count += 1
        return count
        
   
   
   
#BFS iteration using queue:

class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        if not grid or not grid[0]:
            return 0
        row = len(grid)
        col = len(grid[0])
        seen = [[0]*len(grid[0]) for _ in range(len(grid))]
        count = 0
        
        def dfs(m, n):
            q = [[m,n]]
            while q:
                cur_i, cur_j = q.pop()   
                if cur_i>=row or cur_i<0 or cur_j<0 or cur_j>=col:
                    continue
                if not seen[cur_i][cur_j] and grid[cur_i][cur_j] == "1":
                    seen[cur_i][cur_j] = 1
                    q.insert(0, [cur_i+1, cur_j])
                    q.insert(0, [cur_i-1, cur_j])
                    q.insert(0, [cur_i, cur_j+1])
                    q.insert(0, [cur_i, cur_j-1])
            return
        
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if not seen[i][j] and grid[i][j] == "1":
                    dfs(i,j)
                    count += 1
        return count
        
        

        
        
        
        
        
        

        
        
                    

        
        
        
        
        
        

        
        
                    

        
        
        
        
        
        

        
        
                    

        
        
                    
