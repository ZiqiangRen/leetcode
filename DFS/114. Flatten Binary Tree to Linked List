# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None


# Time: O(n)
# Space: O(nlogn)

class Solution(object):
    def flatten(self, root):
        """
        :type root: TreeNode
        :rtype: void Do not return anything, modify root in-place instead.
        """
        if not root:
            return
        self.flatten(root.left)
        self.flatten(root.right)
        tmp = root.left
        while tmp and tmp.right:
            tmp = tmp.right
        if tmp:
            tmp.right = root.right
            root.right, root.left = root.left, None        
        return
        
        
        
# DFS using stack
# time O(n) 
# space O(n)

class Solution(object):
    def flatten(self, root):
        """
        :type root: TreeNode
        :rtype: void Do not return anything, modify root in-place instead.
        """
        stack = []
        node = root
        while node:
            if node.right:
                stack.append(node.right)
            if node.left:
                node.right, node.left = node.left, None
            else:
                if stack:
                    node.right = stack.pop()
            node = node.right
        return
                
            
            
        
        
