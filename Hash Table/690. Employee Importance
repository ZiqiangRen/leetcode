###############
"""
# Employee info
class Employee(object):
    def __init__(self, id, importance, subordinates):
        # It's the unique id of each node.
        # unique id of this employee
        self.id = id
        # the importance value of this employee
        self.importance = importance
        # the id of direct subordinates
        self.subordinates = subordinates
"""
class Solution(object):
    def getImportance(self, employees, id):
        """
        :type employees: Employee
        :type id: int
        :rtype: int
        """
        emap = {e.id: e for e in employees}
        seen = {}
        self.count = 0
        def dfs(id):
            if id in seen:
                return
            seen[id]=1
            self.count += emap[id].importance
            for nid in emap[id].subordinates:
                dfs(nid)
            return
        dfs(id)
        return self.count
        
