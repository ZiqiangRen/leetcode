class Codec:
    def __init__(self):
        self.hash = []
        
    def encode(self, longUrl):
        """Encodes a URL to a shortened URL.
        
        :type longUrl: str
        :rtype: str
        """
        if longUrl not in self.hash:
            self.hash.append(longUrl)
            return "http://tinyurl.com/"+str(len(self.hash)-1)
        else:
            return "http://tinyurl.com/"+str(self.hash.index(longUrl))
        

    def decode(self, shortUrl):
        """Decodes a shortened URL to its original URL.
        
        :type shortUrl: str
        :rtype: str
        """
        index = int(shortUrl[-1])
        return self.hash[index]
        

# Your Codec object will be instantiated and called as such:
# codec = Codec()
# codec.decode(codec.encode(url))


##############
class Codec:
    
    alphabet = string.ascii_letters + '0123456789'
    
    def __init__(self):
        self.urls = {}
        self.codes = {}
        
        
    def encode(self, longUrl):
        """Encodes a URL to a shortened URL.
        
        :type longUrl: str
        :rtype: str
        """
        while longUrl not in self.urls:
            code = ''.join(random.choice(Codec.alphabet) for _ in range(6))
            if code not in self.codes:
                self.codes[code] = longUrl
                self.urls[longUrl] = code
        return "http://tinyurl.com/"+code
        

    def decode(self, shortUrl):
        """Decodes a shortened URL to its original URL.
        
        :type shortUrl: str
        :rtype: str
        """
        return self.codes[shortUrl[-6:]]
        

# Your Codec object will be instantiated and called as such:
# codec = Codec()
# codec.decode(codec.encode(url))
