#########  TLE
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def longestUnivaluePath(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        ans = [0]
        self.seen = {}
        self.cache = {}
        def helper(q):
            while any(q):
                node = q.pop()
                if node:
                    if node not in self.seen:
                        ans.append(deepest(node))
                    q.insert(0, node.left)
                    q.insert(0, node.right)         
        
        def deepest(root, connected=False):
            if root in self.seen:
                return self.seen[root]
            if root:
                if root.left and root.right and root.left.val==root.val and root.right.val==root.val:
                    if not connected:
                        self.seen[root] = 2+deepest(root.left, True) + deepest(root.right, True)
                    else:
                        self.seen[root] = max(1+deepest(root.left, True), 1+deepest(root.right, True))
                elif root.left and root.left.val==root.val:
                        self.seen[root] = 1+deepest(root.left, connected)
                elif root.right and root.right.val==root.val:
                        self.seen[root] = 1+deepest(root.right, connected)
                else:
                    self.seen[root] = 0
            else:
                self.seen[root] = 0
            return self.seen[root]
            
                    
        helper([root])
        #print ans
        return max(ans) 
 ##########################################################################
     def longestUnivaluePath(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        self.ans = 0
        def arrow_length(root):
            if not root:
                return 0
            left = arrow_length(root.left)
            right = arrow_length(root.right)
            left_arrow = left+1 if root.left and root.left.val==root.val else 0
            right_arrow = right+1 if root.right and root.right.val==root.val else 0
            self.ans = max(self.ans, left_arrow+right_arrow)
            return max(left_arrow, right_arrow)
        arrow_length(root)
        return self.ans
        
