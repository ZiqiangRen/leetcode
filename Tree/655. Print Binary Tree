# Fist try:
#

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def printTree(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[str]]
        """
        depth = self.depth(root)
        row = depth
        col = 2**depth - 1
        ans = [[""]*col for _ in range(row)]
        q = [(root, 0, col/2)]
        while q:
            node, layer, pos = q.pop()
            ans[layer][pos] = str(node.val)
            if node.left:
                q.insert(0, (node.left, layer+1, pos-(2**(depth-layer-2))))
            if node.right:
                q.insert(0, (node.right, layer+1, pos+(2**(depth-layer-2))))
        return ans
                 
    def depth(self, root):
        if not root:
            return 0
        return 1+max(self.depth(root.left), self.depth(root.right))
